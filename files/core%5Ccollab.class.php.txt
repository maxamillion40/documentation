<?php
	/**
		* Use this class when dealing with a collab
		* @package core
		* @since 2014-08-20
	*/
	class collab	{
		/**
			* Collab ID as known in the database
			* @var int
		*/
		public $id;
		
		/**
			* ID of last collabmessage as known in the database
			* @var int
			* @see collabmessage::internalID
		*/
		public $lastInternalID;
		
		/**
			* Collab name
			* @var string
		*/
		public $name;
		
		/**
			* Collab start time
			* @var time
		*/
		public $starttime;
		
		/**
			* Collab participants.
			* two-dimensional array of user objects. Regular members can be found at ["members"] while candidates are stored in ["candidates"]
			* @var array
		*/
		public $members;
		
		/**
			* Collab opening state.
			* Can be either open or closed
			* @var string
		*/
		public $status;
		
		/**
			* Collab owner
			* @var user
		*/
		public $owner;
		
		/**
			* Description
			* @var string
		*/
		public $desc;
		
		/**
			* Binary data of the collab logo
			* @var string
		*/
		public $logo;
		
		/**
			* Settings
			* @var array
		*/
		public $settings;
		
		/**
			* Announcement
			* @var string
		*/
		public $announcement;
		
		/**
			* Project ID for the project preview
			* @var int
		*/
		public $pid;
		
		/**
			* Stores IDs of projects assigned to this collab
			* @var array
		*/
		private $projectIDs;
		
		/**
			* Member rank "guest"
			* @const
		*/
		const RANK_GUEST = 0;
		
		/**
			* Member rank "candidate"
			* @const
		*/
		const RANK_CANDIDATE = 1;
		
		/**
			* Member rank "member"
			* @const
		*/
		const RANK_MEMBER = 2;
		
		/**
			* Member rank "owner"
			* @const
		*/
		const RANK_OWNER = 3;
		
		/**
			* Convert a collab member rank to a string
			* @param int $rank collab::RANK_*
		*/
		public static function rank_to_string($rank)	{
			switch($rank)	{
				case 0:
					return "Guest";
					break;
				case 1:
					return "Candidate";
					break;
				case 2:
					return "Member";
					break;
				case 3:
					return "Owner";
					break;
			}
		}
		
		/**
			* Constructor.
			* @param int $id Collab ID as known in the database
			* @return void
		*/
		public function __construct($id)	{
			// Load all collab data from DB
			global $_MYSQL;
			$data = $_MYSQL -> get("SELECT * FROM collabs WHERE id=?",array($id));
			$this -> id 			= (int) $data[0]["id"];
			$this -> name 			= (string) $data[0]["name"];
			$this -> starttime 		= (object) new time((int) $data[0]["start"]);
			$this -> members 		= (array) unserialize((string) $data[0]["mitglieder"]);
			$this -> status			= (string) $data[0]["status"];
			$this -> owner 			= (object) new user((string) $this->members["founder"]);
			$this -> desc 			= (string) $data[0]["desc"];
			$this -> logo 			= (string) $data[0]["logo"];
			$this -> announcement	= (string) $data[0]["announcement"];
			$this -> pid 			= (int) $data[0]["pid"];
			$this -> lastInternalID = (int) $data[0]["lastInternalID"];
			$this -> settings 		= array(
				"members_max" => $data[0]["setting_members-max"],
				"confirm_join" => $data[0]["setting_confirm-join"],
				"new_members" => $data[0]["setting_new-members"],
				"language" => $data[0]["setting_language"]
			);
			$this -> projectIDs = array();
			$rawIDs	= $_MYSQL -> get("SELECT `id` FROM `projects` WHERE `collab`=?", array($this -> id));
			foreach($rawIDs as $id)	{
				array_push($this -> projectIDs, $id[0]);
			}
			// Create user objects for members
			$max = count($this -> members["people"]);
			for($i=0; $i < $max; $i++)	{
				//Create a new user object by the user's name and insert it as $this -> members["people"][USERNAME]
				$this -> members["people"][$this -> members["people"][$i]] = new user($this -> members["people"][$i]);
				unset($this -> members["people"][$i]);
			}
			// Create user objects for candidates
			$max = count($this -> members["candidates"]);
			for($i=0; $i < $max; $i++)	{
				//Create a new user object by the candidate's name and insert it as $this -> members["candidates"][USERNAME]
				$this -> members["candidates"][$this -> members["candidates"][$i]] = new user($this -> members["candidates"][$i]);
				unset($this->members["candidates"][$i]);
			}
		}
		
		/**
			* Get the rank of a user in the collab.
			* @param string $name Username
			* @return int
			* @see collab::RANK_* Collab member ranks
			* @api
		*/
		public function member_rank($name)	{
			if(!is_string($name))	{
				trigger_error("Bad argument #1 to collab::member_rank(), string expected, got " . gettype($name), E_USER_ERROR);
			}
			// Return the rank of a user in this collab
			$name = new user($name);
			if(array_key_exists($name -> name, $this -> members["people"]))	{
				return collab::RANK_MEMBER;
			}
			elseif(array_key_exists($name -> name, $this -> members["candidates"]))	{
				return collab::RANK_CANDIDATE;
			}
			elseif($this -> owner -> name == $name -> name)	{
				return collab::RANK_OWNER;
			}
			else	{
				return collab::RANK_GUEST;
			}
		}
		
		/**
			* Add a user to the collab.
			* @param string $name Username
			* @param integer $rank collab::RANK_*
			* @return void
			* @api
		*/
		public function add_member($name, $rank)	{
			if(!is_string($name))	{
				trigger_error("Bad argument #1 to collab::add_member(), string expected, got " . gettype($name), E_USER_ERROR);
			}
			if(!is_int($rank))	{
				trigger_error("Bad argument #2 to collab::add_member(), integer expected, got " . gettype($name), E_USER_ERROR);
			}
			//
			global $_MYSQL;
			$name = new user($name);
			if($rank == collab::RANK_MEMBER)	{
				$this -> members["people"][] = $name;
				if(isset($this -> members["candidates"][$name]))	{
					unset($this -> members["candidates"][$name]);
				}

				$arr = array(
					"founder" => $this -> members["founder"],
					"people" => array(),
					"candidates" => array(),
				);
				
				foreach($this -> members["people"] as $member)	{
					$arr["people"][] = $member -> name;
				}
				foreach($this -> members["candidates"] as $member)	{
					$arr["candidates"][] = $member -> name;
				}

				$_MYSQL -> set("UPDATE collabs SET mitglieder=? WHERE id=?", array(
					serialize($arr),
					$this -> id
				));
			}
			
			if($rank == collab::RANK_CANDIDATE)	{
				$this -> members["candidates"][] = $name;

				$arr = array(
					"founder" => $this -> members["founder"],
					"people" => array(),
					"candidates" => array(),
				);
				
				foreach($this -> members["people"] as $member)	{
					$arr["people"][] = $member -> name;
				}
				foreach($this -> members["candidates"] as $member)	{
					$arr["candidates"][] = $member -> name;
				}

				$_MYSQL -> set("UPDATE collabs SET mitglieder=? WHERE id=?", array(
					serialize($arr),
					$this -> id
				));
			}
		}
		
		/**
			* Remove a user from the collab.
			* @param string $name Username
			* @param integer $rank collab::RANK_*
			* @return void
			* @api
		*/
		public function remove_member($name, $rank)	{
			if(!is_string($name))	{
				trigger_error("Bad argument #1 to collab::remove_member(), string expected, got " . gettype($name), E_USER_ERROR);
			}
			if(!is_int($rank))	{
				trigger_error("Bad argument #2 to collab::remove_member(), integer expected, got " . gettype($name), E_USER_ERROR);
			}
			//
			global $_MYSQL;
			if($rank == collab::RANK_MEMBER)	{
				unset($this -> members["people"][$name]);
			}
			if($rank == collab::RANK_CANDIDATE)	{
				unset($this -> members["candidates"][$name]);
			}
			
			$arr = array(
				"founder" => $this -> members["founder"],
				"people" => array(),
				"candidates" => array(),
			);
			
			foreach($this -> members["people"] as $member)	{
				$arr["people"][] = $member -> name;
			}
			foreach($this -> members["candidates"] as $member)	{
				$arr["candidates"][] = $member -> name;
			}

			$_MYSQL -> set("UPDATE collabs SET mitglieder=? WHERE id=?", array(
				serialize($arr),
				$this -> id
			));
		}
		
		/**
			* Close the collab.
			* @return void
			* @api
		*/
		public function close()	{
			global $_MYSQL;
			$_MYSQL -> set("UPDATE `collabs` SET `status`='closed' WHERE `id`=?", array(
				$this -> id
			));
		}
	}
?>
